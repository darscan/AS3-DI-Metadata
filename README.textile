h1. AS3 DI-Related Metadata Standardisation Effort

Spring Actionscript, Dawn, SmartyPants, Swiz, Spicelib (used by Parsley) and SwiftSuspenders (used by Robotlegs) perform Dependency Injection.

Moreover they can all perform automatic DI by parsing class metadata. It would be grand if the common DI related metadata tags could be standardised. That way we really could write code that is decoupled from any particular framework.

h2. Injection by Type

Dawn, Swiz, Spicelib, SwiftSuspenders, SmartyPants: [Inject] (above property, setter or method)
Spring AS: [Autowire] (above property, setter or method)

h4. Most popular

[Inject] by 5

h4. Notes

[Inject] is clear and simple and used by almost all of the libraries. It also directly correlates to @Inject from the JSR-330 Dependency Injection for Java specification. Let's use it.

h2. Injection by Name/Id

Dawn, SwiftSuspenders, SmartyPants: [Inject(name="SomeName")] (above property, setter or method)
Swiz: [Inject(source="SomeName")] (above property, setter or method)
Spicelib: [Inject(id="SomeName")] (above property, setter or method)
Spring AS: [Autowired(name="SomeName")] (above property, setter or method)

h4. Most popular

[Inject(name="SomeName")] by 3

h4. Notes

Since you can define default attributes best practice could be to leave out the attribute: [Inject("SomeName")]

h2. Constructor Injection:

SwiftSuspenders: [Inject] (above class)
Spicelib: [InjectConstructor] (above class)
Swiz, Spring AS, Dawn: ?

h4. Most popular

?

h4. Notes

I don't see the need for an extra tag ([InjectConstructor]) when we could simply use [Inject].

h2. Object Lifecycle - Post Injection:

Dawn, SwiftSuspenders, SmartyPants, Swiz: [PostConstruct] (above method)
Spicelib: [Init] (above method)

h4. Most popular

[PostConstruct] by 4

h4. Notes

@PostConstruct is used in Java for the same purpose. Let's use the most popular, established one.

h2. Object Lifecycle - Teardown:

SwiftSuspenders, SmartyPants, Dawn: none?
Swiz: [PreDestroy] (above method)
Spicelib: [Destroy] (above method)

h4. Most popular

h4. Notes

@PreDestroy is used in Java for the same purpose. Let's use the most familiar, established one.

h2. Factory/Provider:

SwiftSuspenders, SmartyPants, Swiz: none?
Dawn: [Provider] (above method)
Spicelib: [Factory] (above method)

h4. Most popular

h4. Notes

h2. Event handling

Swiz and Spring AS: [EventHandler] above method
Spicelib: [MessageHandler] (not specifically aimed at events)
Dawn, SwiftSuspenders, SmartyPants: ?

h4. Most popular

[EventHandler] by 1 or 2, depending on your perspective

h4. To Be Determined: Arguments

For example:

<pre>
  [EventHandler(name="login, type="domain.events.LoginEvent")]
  public function handleLogin (event:LoginEvent) : void {
</pre>

Or, for sending the Event properties directly into the method:

<pre>
  [EventHandler(name="login, type="domain.events.LoginEvent", properties="user,role")]
  public function handleLogin (user:User, role:String) : void {
</pre>

Swiz, for example supports this syntax:

[EventHandler(event="com.foo.events.UserEvent.ADD_USER")]

But I think it would be nice to keep things in line with how custom events are normally documented (with name and type arguments):

[Event(name="click", type="flash.events.Event")]

h4. Notes

[EventHandler] is clear in its purpose and intent. Flash Player is an event based runtime, so the standard should be based on Events.

Is event handling outside of the scope of this document?